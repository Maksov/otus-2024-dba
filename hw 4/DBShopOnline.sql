-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE DATABASE "DBShopOnline"
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'en_US.utf8'
    LC_CTYPE = 'en_US.utf8'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;

GRANT TEMPORARY, CONNECT ON DATABASE "DBShopOnline" TO PUBLIC;

GRANT ALL ON DATABASE "DBShopOnline" TO postgres;


CREATE TABLE IF NOT EXISTS dictionary.supplier
(
    id serial NOT NULL,
    name character(50) NOT NULL,
    phone character(20) NOT NULL,
    email character(50),
    address character(100),
    country character(20),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS dictionary.manufacturer
(
    id serial NOT NULL,
    name character(50) NOT NULL,
    email character(50),
    web character(20),
    country character(20),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS dictionary.category
(
    id serial NOT NULL,
    name character NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS dictionary.price
(
    id serial NOT NULL,
    price numeric(7, 4) NOT NULL,
    date_start date NOT NULL,
    date_end date,
    product_id integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ecommerce.product
(
    id serial NOT NULL,
    name character(50) NOT NULL,
    description character(255) NOT NULL,
    sku character(10) NOT NULL,
    manufacturer_id integer NOT NULL,
    category_id integer NOT NULL,
    supplier_id integer NOT NULL,
    PRIMARY KEY (id)
);



CREATE TABLE IF NOT EXISTS ecommerce."orderItem"
(
    id serial NOT NULL,
    quantity integer NOT NULL DEFAULT 1,
    order_id integer,
    product_id integer,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS profile.customer
(
    id serial NOT NULL,
    username character(50) NOT NULL,
    password character(256) NOT NULL,
    name character(50) NOT NULL,
    last_name character(50) NOT NULL,
    email character(50) NOT NULL,
    phone character(50) NOT NULL,
    birthday date,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ecommerce."order"
(
    id serial NOT NULL,
    payment_method character(50) NOT NULL,
    order_status character(50) NOT NULL,
    order_date date NOT NULL,
    customer_id integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS profile.address
(
    id serial NOT NULL,
    address character(50) NOT NULL,
    city character(50) NOT NULL,
    state character(50) NOT NULL,
    postal_code character(50) NOT NULL,
    customer_id integer NOT NULL,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS ecommerce.product
    ADD CONSTRAINT fk_manufacturer_product FOREIGN KEY (manufacturer_id)
    REFERENCES dictionary.manufacturer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS ecommerce.product
    ADD CONSTRAINT fk_category_product FOREIGN KEY (category_id)
    REFERENCES dictionary.category (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS ecommerce.product
    ADD CONSTRAINT fk_supplier_product FOREIGN KEY (supplier_id)
    REFERENCES dictionary.supplier (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS dictionary.price
    ADD CONSTRAINT fk_product_price FOREIGN KEY (product_id)
    REFERENCES ecommerce.product (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS ecommerce."orderItem"
    ADD CONSTRAINT "fk_order_orderItem" FOREIGN KEY (order_id)
    REFERENCES ecommerce."order" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS ecommerce."orderItem"
    ADD CONSTRAINT "fk_product_orderItem" FOREIGN KEY (product_id)
    REFERENCES ecommerce.product (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS ecommerce."order"
    ADD CONSTRAINT fk_customer_order FOREIGN KEY (customer_id)
    REFERENCES profile.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS profile.address
    ADD CONSTRAINT fk_customer_address FOREIGN KEY (customer_id)
    REFERENCES profile.customer (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


CREATE ROLE shopuser_reader WITH
	NOLOGIN
	NOSUPERUSER
	NOCREATEDB
	NOCREATEROLE
	INHERIT
	NOREPLICATION
	NOBYPASSRLS
	CONNECTION LIMIT -1;
	
CREATE ROLE shopuser_writer WITH
	NOLOGIN
	NOSUPERUSER
	NOCREATEDB
	NOCREATEROLE
	INHERIT
	NOREPLICATION
	NOBYPASSRLS
	CONNECTION LIMIT -1;
	
CREATE ROLE dictionary_admin WITH
  NOLOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION
  NOBYPASSRLS
  CONNECTION LIMIT -1;

CREATE ROLE shop_admin WITH
  NOLOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION
  NOBYPASSRLS
  CONNECTION LIMIT -1;
  
  

GRANT CONNECT ON DATABASE "DBShopOnline" TO dictionary_admin;

GRANT CONNECT ON DATABASE "DBShopOnline" TO shop_admin;

GRANT CONNECT ON DATABASE "DBShopOnline" TO shopuser_reader;

GRANT CONNECT ON DATABASE "DBShopOnline" TO shopuser_writer;

GRANT ALL ON TABLE dictionary.category TO dictionary_admin;

GRANT ALL ON TABLE dictionary.category TO shop_admin;

GRANT SELECT ON TABLE dictionary.category TO shopuser_reader;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE dictionary.category TO shopuser_writer;

GRANT ALL ON TABLE dictionary.manufacturer TO dictionary_admin;

GRANT ALL ON TABLE dictionary.manufacturer TO shop_admin;

GRANT SELECT ON TABLE dictionary.manufacturer TO shopuser_reader;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE dictionary.manufacturer TO shopuser_writer;

GRANT ALL ON TABLE dictionary.price TO dictionary_admin;

GRANT ALL ON TABLE dictionary.price TO shop_admin;

GRANT SELECT ON TABLE dictionary.price TO shopuser_reader;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE dictionary.price TO shopuser_writer;

GRANT ALL ON TABLE dictionary.supplier TO dictionary_admin;

GRANT ALL ON TABLE dictionary.supplier TO shop_admin;

GRANT SELECT ON TABLE dictionary.supplier TO shopuser_reader;

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE dictionary.supplier TO shopuser_writer;

GRANT ALL ON TABLE ecommerce."order" TO shop_admin;

GRANT SELECT ON TABLE ecommerce."order" TO shopuser_reader;

GRANT INSERT, SELECT, UPDATE, DELETE ON TABLE ecommerce."order" TO shopuser_writer;

GRANT ALL ON TABLE ecommerce."orderItem" TO shop_admin;

GRANT SELECT ON TABLE ecommerce."orderItem" TO shopuser_reader;

GRANT INSERT, SELECT, UPDATE, DELETE ON TABLE ecommerce."orderItem" TO shopuser_writer;

GRANT ALL ON TABLE ecommerce.product TO shop_admin;

GRANT SELECT ON TABLE ecommerce.product TO shopuser_reader;

GRANT INSERT, SELECT, UPDATE, DELETE ON TABLE ecommerce.product TO shopuser_writer;

GRANT ALL ON TABLE profile.address TO shop_admin;

GRANT INSERT, SELECT, UPDATE, DELETE ON TABLE profile.address TO shopuser_writer;

GRANT SELECT ON TABLE profile.address TO shopuser_reader;

GRANT ALL ON TABLE profile.customer TO shop_admin;

GRANT INSERT, SELECT, UPDATE, DELETE ON TABLE profile.customer TO shopuser_writer;

GRANT SELECT ON TABLE profile.customer TO shopuser_reader;

END;